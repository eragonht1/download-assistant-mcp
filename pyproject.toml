[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]

[project]
name = "download-assistant-mcp"
version = "1.0.0"
description = "A FastMCP-based universal file download assistant with batch processing capabilities"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Developer", email = "developer@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "requests>=2.31.0",
    "Pillow>=10.0.0",
    "fastmcp>=0.2.0",
    "validators>=0.20.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
]

[project.urls]
Homepage = "https://github.com/eragonht1/download-assistant-mcp"
Repository = "https://github.com/eragonht1/download-assistant-mcp.git"
Issues = "https://github.com/eragonht1/download-assistant-mcp/issues"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=. --cov-report=term-missing --cov-report=html"
testpaths = [
    "tests",
]


[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    ".venv/*",
    "__pycache__/*",
    "*.pyc",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]